#!/usr/bin/env node

var HELP = ['usage: lowkick [action] [options]'
         , ''
         , 'Simplifies running and verifying cross-browser tests on command-line.'
         , ''
         , 'actions:'
         , '  revision   <config>                  Show the revision number LowKick recognizes. Pass <config> if it contains any version/revision definiton.'
         , '  verify     <config> <results-file>   Verify current version of the tests. <config> is needed if there `pwd` doesn\'t contain a file named .lowkick'
         , '  publish    <config> <results-file>   Start publishing tests. Default <results-file> value is lowkick-test-results.json'
         , ''
         , 'options:'
         , '  quiet     Hide console messages'
         , '  verbose   Make console output more verbose'
         , '  version   Show version number and exit'
         , '  help      Show help'].join('\n');


var lowkick    = require('../lib/lowkick'),
    server     = require('../lib/server'),
    colors     = require('colors'),
    puts       = require('util').puts,
    existsSync = require('path').existsSync,
    buildOptions = {};

var opt  = require('optimist'),
    argv = opt
      .usage('Usage: $0 [ACTION] [OPTIONS]')
      .options('verbose', {})
      .options('quiet', {})
      .options('version', {})
      .options('help', {})
      .argv;

function revision(){
  lowkick.quiet();
  lowkick.revision(puts);
}

function verify(){
  lowkick.quiet();

  var configFilename  = argv._[1],
      resultsFilename = argv._[2];

  configFilename && lowkick.config.filename(configFilename);
  resultsFilename && lowkick.report.filename(resultsFilename);

  lowkick.verify(function(error, results){
    if(error){
      lowkick.logging.error('An error occured: ', error);
    }

    var passed   = results.passed.join(', '),
        failed   = results.failed.join(', '),
        untested = results.untested.join(', ');

    puts((untested ? ( 'Not Tested: '.bold + untested + '\n' ).blue : '')
         + ( passed ? ( 'Passed: '.bold + passed + '\n' ).green : '')
         + ( failed ? ( 'Failed: '.bold + failed + '\n' ).red : '' )
         + '\n'
         + 'Revision: '.bold
         + results.revision
         + '\nResults Source: '.bold
         + lowkick.report.filename()
         + '\nConfig: '.bold
         + lowkick.config.filename()
        );
  });
}

function publish(){
  
  var configFilename  = argv._[1],
      resultsFilename = argv._[2];

  configFilename && lowkick.config.filename(configFilename);
  resultsFilename && lowkick.report.filename(resultsFilename);

  lowkick.logging.setLevel('DEBUG');

  lowkick.config(function(error, config){
    
    if(error) throw error;

    server.start({ 'port': config.port, 'host': config.host });

  });
}

function version(){
  throw new Error('not implemented');
}

function help(){
  puts(HELP);
}

var action = argv._[0];

if(argv.verbose) {
  lowkick.verbose();
}

switch(action){
  case 'revision': revision(); break;
  case 'verify': verify(); break;
  case 'publish': publish(); break;
  default:
    if(argv.version){
      version();
    } else {
      help();
    }
}
