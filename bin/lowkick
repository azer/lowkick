#!/usr/bin/env node

var HELP = ['usage: lowkick [action] [options]'
         , ''
         , 'Simplifies running and verifying cross-browser tests on command-line.'
         , ''
         , 'actions:'
         , '  revision   <config               Show the revision number LowKick recognizes. Pass <config> if it contains any version/revision definiton.'
         , '  verify     <config>              Verify current version of the tests. <config> is needed if there `pwd` doesn\'t contain a file named .lowkick'
         , '  publish    <config>              Start publishing tests. Default <results-file> value is lowkick-test-results.json'
         , '  command    <command> <config>    Run specified custom commmand. Custom commands are defined in the config file.'
         , ''
         , 'options:'
         , '  quiet     Hide console messages'
         , '  verbose   Make console output more verbose'
         , '  version   Show version number and exit'
         , '  help      Show help'].join('\n');


var lowkick    = require('../lib/lowkick'),
    server     = require('../lib/server'),
    colors     = require('colors'),
    puts       = require('util').puts,
    existsSync = require('path').existsSync,
    buildOptions = {};

var opt  = require('optimist'),
    argv = opt
      .usage('Usage: $0 [ACTION] [OPTIONS]')
      .options('verbose', {})
      .options('quiet', {})
      .options('version', {})
      .options('help', {})
      .argv;

function revision(){
  lowkick.quiet();
  lowkick.revision(puts);
}

function verify(){
  !argv.verbose && !argv.quiet && lowkick.quiet();

  var configFilename  = argv._[1];

  configFilename && lowkick.config.filename(configFilename);

  lowkick.cli.verify();
}

function publish(){
  var configFilename  = argv._[1];

  configFilename && lowkick.config.filename(configFilename);

  !argv.verbose && !argv.quiet && lowkick.logging.setLevel('DEBUG');

  lowkick.cli.publish();
}

function command(){
  var configFilename  = argv._[2],
      commandName = argv._[1];
  
  configFilename && lowkick.config.filename(configFilename);
  !argv.verbose && !argv.quiet && lowkick.logging.setLevel('DEBUG');

  lowkick.cli.command(commandName);
}

function version(){
  throw new Error('not implemented');
}

function help(){
  puts(HELP);
}

var action = argv._[0];

if(argv.verbose) {
  lowkick.verbose();
}

if(argv.quiet) {
  lowkick.quiet();
}

switch(action){
  case 'revision': revision(); break;
  case 'verify': verify(); break;
  case 'publish': publish(); break;
  case 'command': command(); break;
  default:
    if(argv.version){
      version();
    } else {
      help();
    }
}
